{"version":3,"sources":["Grid/Poster.js","Grid/Grid.js","Detail/Show.js","Detail/Detail.js","App.js","serviceWorker.js","index.js"],"names":["Poster","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","items","_this2","movie","fetch","imdbID","then","res","json","result","setState","item","id","title","Title","year","Year","poster","_this$state","react_default","a","createElement","message","className","href","src","alt","Component","Grid","shows","data","handleChange","bind","assertThisInitialized","event","input","target","value","filter","show","toLowerCase","includes","type","placeholder","onChange","map","Grid_Poster","assign","key","replace","Show","console","log","Plot","Detail","showId","match","params","react_router_dom","to","Detail_Show","App","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4fe7c5c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Poster extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            items: []\n        };\n    }\n\n    componentDidMount() {\n        const movie = this.props;\n\n        fetch(\"http://www.omdbapi.com/?i=\" + movie.imdbID + \"&apikey=2ec014c3\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        item: {\n                            id: movie.imdbID,\n                            title: result.Title,\n                            year: result.Year,\n                            poster: result.Poster\n                        }\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            );\n    }\n\n    render() {\n        const { error, isLoaded, item } = this.state;\n\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return (\n                <a className=\"poster\" href={\"shows/\" + item.id} >\n                    <img className=\"posterImage\" src={item.poster} alt=\"\" />\n                    <p>{item.title}</p>\n                    <p>({item.year})</p>\n                </a >\n            );\n        }\n    }\n}\n\nexport default Poster;\n","import React, { Component } from 'react';\n\nimport data from './data.json';\n\nimport Poster from './Poster';\nimport '../styles/Grid.css';\n\nclass Grid extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            shows: data.shows\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        let input = event.target.value;\n        let shows;\n\n        if (input) {\n\n            shows = data.shows.filter((show) => {\n                return show.title.toLowerCase().includes(input.toLowerCase())\n            })\n\n            this.setState({ shows: shows });\n\n        } else {\n            this.setState({ shows: data.shows });\n\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"gridView\">\n                <input className=\"search\" type=\"text\" placeholder=\"Search Show\" onChange={this.handleChange} />\n                <div className=\"billboard\">\n                    {this.state.shows.map(show =>\n                        // <Link to={`${match.url}/shows/` + show.imdbID}>\n                        <Poster {...show} key={show.title.replace(\" \", \"-\")} />\n                        // </Link>\n                    )}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Grid;\n","import React, { Component } from 'react';\n\nconst Show = (props) => {\n    console.log(props);\n    return (\n        <div>\n            <img className=\"detailPosterImage\" src={props.Poster} />\n            <h1>{props.Title}</h1>\n            <p>{props.Year}</p>\n            <p>{props.Plot}</p>\n\n        </div>\n    );\n}\nexport default Show;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nimport Show from './Show';\nimport '../styles/Detail.css';\n\nclass Detail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            show: {}\n        };\n\n    }\n\n    componentDidMount() {\n        const showId = this.props.match.params.id;\n\n        fetch(\"http://www.omdbapi.com/?i=\" + showId + \"&apikey=2ec014c3\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        show: result\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            );\n    }\n\n    render() {\n        const { error, isLoaded, item } = this.state;\n\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return (\n                <div className=\"detailsView\">\n                    <span><Link to=\"/\">&lt;&lt;&lt; Back to Shows List</Link></span>\n                    <Show {...this.state.show} />\n                </div>\n            );\n        }\n    }\n}\n\nexport default Detail;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Grid from './Grid/Grid';\nimport Detail from './Detail/Detail';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Grid} />\n        <Route exact path=\"/shows\" component={Grid} />\n        <Route path=\"/shows/:id\" component={Detail} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}